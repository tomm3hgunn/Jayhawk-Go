### What To Work On ###
- Main Folders
    * apiDisplay/
        - Closed way to test displaying API to html
    * oddsAndEvents/
        - Main app folder
- Main files to focus on
    * services.py
        - Any utilization of any services will be written here, such as API or database
    * views.py
        - Handle incoming variables from services and render them to template HTML
    * urls.py
        - Define URL names with their corresponding views function
    * templates/
        - HTML files that will be rendered by views.py
        - base.html will be the foundation of all other HTML files. It will contain the header, footer, and navigation bar.
    * TBD as time goes on
- API link
    * https://the-odds-api.com/liveapi/guides/v4/#parameters-2
    
### Convert HTML template to show CSS and JS ###
- add {% load static %} to top of page
- With any folder reference, add {% static folder/ %}
    * <img src="images/logo.png> changes to <img src={% static 'images/logo.png' %}>
    * <link rel="stylesheet" href="css/style.css"> changes to <link rel="stylesheet" href={% static 'css/style.css' %}>
    * <script src="js/script.js"></script> changes to <script src={% static 'js/script.js' %}></script>
- create new folder called 'static' and paste all folders (js, css, images, etc.)
    * Do not put HTML files in static

### Django Commands ###
- Create Project (one-time thing)
    django-admin startproject project_name
- Run web server inside folder with manage.py
    python3 manage.py runserver
- Create app inside project (one django project can have multiple separate apps)
    python3 manage.py startapp app_name

### After Creating New App ###
- Refer to helloWorld for template
- Create urls.py file in new app folder
- Create page displays in views.py
- Connect views to urls.py in app folder
- Connect app_name.urls in project folder
- Add app to INSTALLED_APPS in settings.py
- Make database before HTML/CSS files to avoid redundant typing of information

### After creating database model ###
- Migrate database (similar to git staging)
    python3 manage.py makemigrations app_name
- Apply change
    python3 manage.py migrate

### Database Functions ###
- Note: Most used in forms to auto-add to database
- Adding an entry
    from app_name.models import table_name, table_name1, ...
    var_name = table_name(column=some_value, ...)
    var_name.save()
- Retrieve entry
    table_name.objects.get(column=some_value)
- Show all
    table_name.objects.all()
- Set of items
    table_name.item_set.create(column=some_value)
- Show all items
    table_name.item_set.all()
- Delete entry
    var_name.delete()

### Admin Dashboard ###
- Access dashboard
    localhost:8000/admin
- Create admin user
    python3 manage.py createsuperuser
- Enter user and password
    email: jayhawkgo@gmail.com
    user: JayhawkGo
    pass: Jayhawk2022
- Give dashboard access to our model databases (in admin.py)
    admin.site.register(ToDoList)

### Requirements TXT ###
- Start in project folder with manage.py
- Create requirements.txt
    pip freeze > requirements.txt
- Install requirements.txt
    pip install -r requirements.txt

### If you get the error "django.core.exceptions.ImproperlyConfigured: WSGI application 'goforless.wsgi.application' could not be loaded; Error importing module." ###
- In terminal run pip3 install whitenoise
